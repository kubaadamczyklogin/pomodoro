<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Kurs Reacta - Tydzień 2</title>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/uuid/8.3.2/uuid.min.js"
      crossorigin
    ></script>
    <script
      src="https://unpkg.com/react@16/umd/react.development.js"
      crossorigin
    ></script>
    <script
      src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"
      crossorigin
    ></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
      input {
        margin: 0 5px 0 0;
      }
      button {
        margin: 0 5px;
      }
    </style>
  </head>
  <body>
    <h1>test</h1>
    <hr />
    <div id="root"></div>
  </body>
  <script type="text/babel">
    class TimeboxCreator extends React.Component {
      constructor(props) {
        super(props);
        this.titleInput = React.createRef();
        this.durationInput = React.createRef();
        this.defaultDuration = 25;
      }

      handleSubmit = (event) => {
        event.preventDefault();
        this.props.onConfirm({
          id: this.props.id ? this.props.id : uuid.v4(),
          title: this.titleInput.current.value,
          duration: this.durationInput.current.value
        });
        this.titleInput.current.value = "";
        this.durationInput.current.value = this.defaultDuration;
      };

      render() {
        return (
          <form onSubmit={this.handleSubmit} className={"TimeboxCreator"}>
            <input
              defaultValue={this.props.title}
              ref={this.titleInput}
              type="text"
            />
            <input
              defaultValue={
                this.props.duration ? this.props.duration : this.defaultDuration
              }
              ref={this.durationInput}
              type="number"
            />
            <button type="submit">
              {this.props.isEditing ? "Zmień" : "Dodaj"}
            </button>
            {this.props.isEditing ? (
              <button onClick={() => false}>Anuluj</button>
            ) : (
              false
            )}
          </form>
        );
      }
    }

    function TimeboxItem(props) {
      return (
        <li>
          <span>{props.title} </span>
          <span>{props.duration}</span>
          <button onClick={props.onEdit}>Zmień</button>
          <button onClick={props.onDelete}>Usuń</button>
        </li>
      );
    }

    class TimeboxList extends React.Component {
      state = {
        timeboxes: [
          { id: uuid.v4(), title: "timebox 1", duration: 23 },
          { id: uuid.v4(), title: "timebox 6", duration: 24 },
          { id: uuid.v4(), title: "timebox 3", duration: 25 }
        ]
      };

      handleTimeboxDelete = (idToDelete) => {
        this.setState((prevState) => {
          const timeboxes = prevState.timeboxes.filter((item) => {
            return idToDelete !== item.id;
          });
          console.log(timeboxes);
          return {
            timeboxes
          };
        });
      };

      handleTimeboxBindCreator = (idToEdit) => {
        this.setState((prevState) => {
          const timeboxes = prevState.timeboxes.map((item) => {
            item.editing = item.id === idToEdit;
            return item;
          });
          return {
            timeboxes
          };
        });
      };

      handleTimeboxAdd = (timeboxToAdd) => {
        this.handleTimeboxBindCreator(false);
        this.setState((prevState) => {
          const timeboxes = [...prevState.timeboxes, timeboxToAdd];
          return {
            timeboxes
          };
        });
      };

      handleTimeboxEdit = (changedTimebox) => {
        this.setState((prevState) => {
          const timeboxes = prevState.timeboxes.map((item) => {
            return changedTimebox.id === item.id ? changedTimebox : item;
          });
          return {
            timeboxes
          };
        });
      };

      render() {
        return (
          <>
            <TimeboxCreator onConfirm={this.handleTimeboxAdd} />
            <ol>
              {this.state.timeboxes.map((timebox) =>
                timebox.editing ? (
                  <li key={timebox.id}>
                    <TimeboxCreator
                      onConfirm={({ a, b }) => console.log(a, b)}
                      id={timebox.id}
                      title={timebox.title}
                      duration={timebox.duration}
                      isEditing={true}
                      onConfirm={this.handleTimeboxEdit}
                    />
                  </li>
                ) : (
                  <TimeboxItem
                    key={timebox.id}
                    id={timebox.id}
                    title={timebox.title}
                    duration={timebox.duration}
                    onDelete={() => this.handleTimeboxDelete(timebox.id)}
                    onEdit={() => this.handleTimeboxBindCreator(timebox.id)}
                  />
                )
              )}
            </ol>
          </>
        );
      }
    }

    function App() {
      return (
        <div className="App">
          <TimeboxList />
        </div>
      );
    }
    ReactDOM.render(<App />, document.getElementById("root"));
  </script>
</html>
